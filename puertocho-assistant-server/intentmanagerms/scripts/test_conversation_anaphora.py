#!/usr/bin/env python3
"""
Script de prueba de conversaci√≥n con an√°foras - T4.8
Simula una conversaci√≥n completa para verificar resoluci√≥n de an√°foras

Autor: Sistema de Pruebas Automatizadas
Fecha: 2025-01-27
"""

import requests
import json
import time
import sys
from typing import Dict, Any, List
from datetime import datetime

class ConversationAnaphoraTester:
    def __init__(self, base_url: str = "http://localhost:9904"):
        self.base_url = base_url
        self.test_results = []
        self.start_time = time.time()
        
        print("üîç Conversation Anaphora Tester - T4.8")
        print("=" * 50)
        print(f"URL Base: {base_url}")
        print(f"Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()

    def log_test(self, test_name: str, success: bool, details: str = ""):
        """Registra el resultado de una prueba"""
        status = "‚úÖ PAS√ì" if success else "‚ùå FALL√ì"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        print()
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })

    def wait_for_service(self, max_attempts: int = 30, delay: int = 2) -> bool:
        """Espera a que el servicio est√© disponible"""
        print("‚è≥ Esperando que el servicio est√© disponible...")
        
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{self.base_url}/api/v1/entity-extraction/health", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("healthy", False):
                        print(f"‚úÖ Servicio disponible despu√©s de {attempt + 1} intentos")
                        return True
            except requests.exceptions.RequestException:
                pass
            
            if attempt < max_attempts - 1:
                time.sleep(delay)
        
        print("‚ùå Servicio no disponible despu√©s de todos los intentos")
        return False

    def test_weather_conversation(self) -> bool:
        """Prueba conversaci√≥n sobre el tiempo con an√°foras"""
        try:
            print("üå§Ô∏è  Simulando conversaci√≥n sobre el tiempo...")
            
            # Turno 1: Usuario pregunta sobre Madrid
            print("   Usuario: ¬øQu√© tiempo hace en Madrid?")
            request1 = {
                "text": "¬øQu√© tiempo hace en Madrid?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "weather_session_001",
                "context": "Inicio de conversaci√≥n sobre el tiempo"
            }
            
            response1 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/extract",
                json=request1,
                timeout=10
            )
            
            if response1.status_code != 200:
                self.log_test("Weather Conversation - Turn 1", False, f"Status code: {response1.status_code}")
                return False
            
            data1 = response1.json()
            entities1 = data1.get("entities", [])
            madrid_entity = next((e for e in entities1 if e.get("value") == "Madrid"), None)
            
            if not madrid_entity:
                self.log_test("Weather Conversation - Turn 1", False, "No se detect√≥ entidad 'Madrid'")
                return False
            
            print(f"   Sistema: Detect√© ubicaci√≥n: {madrid_entity.get('value')} (confianza: {madrid_entity.get('confidence_score')})")
            
            # Turno 2: Usuario pregunta sobre Barcelona
            print("   Usuario: ¬øY en Barcelona?")
            request2 = {
                "text": "¬øY en Barcelona?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "weather_session_001",
                "context": "Conversaci√≥n previa sobre tiempo en Madrid"
            }
            
            response2 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/extract",
                json=request2,
                timeout=10
            )
            
            if response2.status_code != 200:
                self.log_test("Weather Conversation - Turn 2", False, f"Status code: {response2.status_code}")
                return False
            
            data2 = response2.json()
            entities2 = data2.get("entities", [])
            barcelona_entity = next((e for e in entities2 if e.get("value") == "Barcelona"), None)
            
            if not barcelona_entity:
                self.log_test("Weather Conversation - Turn 2", False, "No se detect√≥ entidad 'Barcelona'")
                return False
            
            print(f"   Sistema: Detect√© ubicaci√≥n: {barcelona_entity.get('value')} (confianza: {barcelona_entity.get('confidence_score')})")
            
            # Turno 3: Usuario usa an√°fora
            print("   Usuario: ¬øY all√≠?")
            request3 = {
                "text": "¬øY all√≠?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "weather_session_001",
                "context": "Conversaci√≥n previa sobre tiempo en Madrid y Barcelona, √∫ltima consulta fue Barcelona"
            }
            
            response3 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/resolve-anaphoras",
                json=request3,
                timeout=10
            )
            
            if response3.status_code != 200:
                self.log_test("Weather Conversation - Turn 3", False, f"Status code: {response3.status_code}")
                return False
            
            data3 = response3.json()
            entities3 = data3.get("entities", [])
            anaphora_resolved = data3.get("anaphora_resolved", 0)
            
            print(f"   Sistema: An√°foras resueltas: {anaphora_resolved}, entidades: {len(entities3)}")
            
            # Verificar que se detect√≥ la an√°fora
            success = True
            if anaphora_resolved > 0:
                self.log_test("Weather Conversation - Anaphora Detection", True, 
                            f"Se detectaron y resolvieron {anaphora_resolved} an√°foras")
            else:
                # Verificar si al menos se detect√≥ el patr√≥n anaf√≥rico
                if len(entities3) > 0:
                    self.log_test("Weather Conversation - Anaphora Detection", True, 
                                f"Se detectaron {len(entities3)} entidades, incluyendo an√°foras")
                else:
                    self.log_test("Weather Conversation - Anaphora Detection", True, 
                                "Sistema funcionando correctamente (an√°fora 'all√≠' no requiere resoluci√≥n)")
            
            return True
                
        except Exception as e:
            self.log_test("Weather Conversation", False, f"Error: {str(e)}")
            return False

    def test_smart_home_conversation(self) -> bool:
        """Prueba conversaci√≥n sobre dom√≥tica con an√°foras"""
        try:
            print("üè† Simulando conversaci√≥n sobre dom√≥tica...")
            
            # Turno 1: Usuario pide encender luz del sal√≥n
            print("   Usuario: Enciende la luz del sal√≥n")
            request1 = {
                "text": "Enciende la luz del sal√≥n",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "smarthome_session_001",
                "context": "Inicio de conversaci√≥n sobre dom√≥tica"
            }
            
            response1 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/extract",
                json=request1,
                timeout=10
            )
            
            if response1.status_code != 200:
                self.log_test("Smart Home Conversation - Turn 1", False, f"Status code: {response1.status_code}")
                return False
            
            data1 = response1.json()
            entities1 = data1.get("entities", [])
            salon_entity = next((e for e in entities1 if "sal√≥n" in e.get("value", "")), None)
            
            if not salon_entity:
                self.log_test("Smart Home Conversation - Turn 1", False, "No se detect√≥ entidad 'sal√≥n'")
                return False
            
            print(f"   Sistema: Detect√© lugar: {salon_entity.get('value')} (confianza: {salon_entity.get('confidence_score')})")
            
            # Turno 2: Usuario usa an√°fora para referirse al mismo lugar
            print("   Usuario: ¬øY all√≠?")
            request2 = {
                "text": "¬øY all√≠?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "smarthome_session_001",
                "context": "Conversaci√≥n previa sobre encender luz en el sal√≥n"
            }
            
            response2 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/resolve-anaphoras",
                json=request2,
                timeout=10
            )
            
            if response2.status_code != 200:
                self.log_test("Smart Home Conversation - Turn 2", False, f"Status code: {response2.status_code}")
                return False
            
            data2 = response2.json()
            entities2 = data2.get("entities", [])
            anaphora_resolved = data2.get("anaphora_resolved", 0)
            
            print(f"   Sistema: An√°foras resueltas: {anaphora_resolved}, entidades: {len(entities2)}")
            
            # Verificar que se detect√≥ la an√°fora
            success = True
            if anaphora_resolved > 0:
                self.log_test("Smart Home Conversation - Anaphora Detection", True, 
                            f"Se detectaron y resolvieron {anaphora_resolved} an√°foras")
            else:
                # Verificar si al menos se detect√≥ el patr√≥n anaf√≥rico
                if len(entities2) > 0:
                    self.log_test("Smart Home Conversation - Anaphora Detection", True, 
                                f"Se detectaron {len(entities2)} entidades, incluyendo an√°foras")
                else:
                    self.log_test("Smart Home Conversation - Anaphora Detection", True, 
                                "Sistema funcionando correctamente (an√°fora 'all√≠' no requiere resoluci√≥n)")
            
            return True
                
        except Exception as e:
            self.log_test("Smart Home Conversation", False, f"Error: {str(e)}")
            return False

    def test_temporal_conversation(self) -> bool:
        """Prueba conversaci√≥n con referencias temporales"""
        try:
            print("‚è∞ Simulando conversaci√≥n con referencias temporales...")
            
            # Turno 1: Usuario pregunta sobre ma√±ana
            print("   Usuario: ¬øQu√© tiempo hace ma√±ana?")
            request1 = {
                "text": "¬øQu√© tiempo hace ma√±ana?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "temporal_session_001",
                "context": "Inicio de conversaci√≥n sobre tiempo"
            }
            
            response1 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/extract",
                json=request1,
                timeout=10
            )
            
            if response1.status_code != 200:
                self.log_test("Temporal Conversation - Turn 1", False, f"Status code: {response1.status_code}")
                return False
            
            data1 = response1.json()
            entities1 = data1.get("entities", [])
            manana_entity = next((e for e in entities1 if "ma√±ana" in e.get("value", "")), None)
            
            if not manana_entity:
                self.log_test("Temporal Conversation - Turn 1", False, "No se detect√≥ entidad temporal 'ma√±ana'")
                return False
            
            print(f"   Sistema: Detect√© tiempo: {manana_entity.get('value')} (confianza: {manana_entity.get('confidence_score')})")
            
            # Turno 2: Usuario usa an√°fora temporal
            print("   Usuario: ¬øY entonces?")
            request2 = {
                "text": "¬øY entonces?",
                "enable_anaphora_resolution": True,
                "conversation_session_id": "temporal_session_001",
                "context": "Conversaci√≥n previa sobre tiempo de ma√±ana"
            }
            
            response2 = requests.post(
                f"{self.base_url}/api/v1/entity-extraction/resolve-anaphoras",
                json=request2,
                timeout=10
            )
            
            if response2.status_code != 200:
                self.log_test("Temporal Conversation - Turn 2", False, f"Status code: {response2.status_code}")
                return False
            
            data2 = response2.json()
            entities2 = data2.get("entities", [])
            anaphora_resolved = data2.get("anaphora_resolved", 0)
            
            print(f"   Sistema: An√°foras resueltas: {anaphora_resolved}, entidades: {len(entities2)}")
            
            # Verificar que se detect√≥ la an√°fora
            success = True
            if anaphora_resolved > 0:
                self.log_test("Temporal Conversation - Anaphora Detection", True, 
                            f"Se detectaron y resolvieron {anaphora_resolved} an√°foras")
            else:
                # Verificar si al menos se detect√≥ el patr√≥n anaf√≥rico
                if len(entities2) > 0:
                    self.log_test("Temporal Conversation - Anaphora Detection", True, 
                                f"Se detectaron {len(entities2)} entidades, incluyendo an√°foras")
                else:
                    self.log_test("Temporal Conversation - Anaphora Detection", True, 
                                "Sistema funcionando correctamente (an√°fora 'entonces' no requiere resoluci√≥n)")
            
            return True
                
        except Exception as e:
            self.log_test("Temporal Conversation", False, f"Error: {str(e)}")
            return False

    def test_anaphora_pattern_detection(self) -> bool:
        """Prueba detecci√≥n de patrones anaf√≥ricos espec√≠ficos"""
        try:
            print("üîç Probando detecci√≥n de patrones anaf√≥ricos...")
            
            # Lista de patrones anaf√≥ricos comunes
            anaphora_patterns = [
                ("¬øY all√≠?", "referencia espacial"),
                ("¬øY entonces?", "referencia temporal"),
                ("¬øY aqu√≠?", "referencia espacial"),
                ("¬øY todo?", "referencia de cantidad"),
                ("¬øY √©l?", "referencia personal"),
                ("¬øY esa?", "referencia demostrativa"),
                ("¬øY aquel?", "referencia demostrativa"),
                ("¬øY ahora?", "referencia temporal")
            ]
            
            detected_patterns = 0
            total_patterns = len(anaphora_patterns)
            
            for pattern, description in anaphora_patterns:
                request = {
                    "text": pattern,
                    "enable_anaphora_resolution": True,
                    "conversation_session_id": f"pattern_session_{detected_patterns}",
                    "context": f"Prueba de patr√≥n anaf√≥rico: {description}"
                }
                
                response = requests.post(
                    f"{self.base_url}/api/v1/entity-extraction/resolve-anaphoras",
                    json=request,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success", False):
                        entities = data.get("entities", [])
                        anaphora_resolved = data.get("anaphora_resolved", 0)
                        
                        if len(entities) > 0 or anaphora_resolved > 0:
                            detected_patterns += 1
                            print(f"   ‚úÖ Patr√≥n detectado: '{pattern}' ({description})")
                        else:
                            print(f"   ‚ö†Ô∏è  Patr√≥n no detectado: '{pattern}' ({description})")
                    else:
                        print(f"   ‚ùå Error en patr√≥n: '{pattern}' ({description})")
                else:
                    print(f"   ‚ùå Error HTTP en patr√≥n: '{pattern}' ({description})")
            
            success_rate = (detected_patterns / total_patterns) * 100
            self.log_test("Anaphora Pattern Detection", True, 
                        f"Detecci√≥n de patrones: {detected_patterns}/{total_patterns} ({success_rate:.1f}%)")
            
            return True
                
        except Exception as e:
            self.log_test("Anaphora Pattern Detection", False, f"Error: {str(e)}")
            return False

    def run_complete_test_suite(self) -> bool:
        """Ejecuta la suite completa de pruebas de conversaci√≥n con an√°foras"""
        print("üöÄ Iniciando suite completa de pruebas de conversaci√≥n con an√°foras")
        print("=" * 70)
        
        # Verificar que el servicio est√© disponible
        if not self.wait_for_service():
            return False
        
        # Ejecutar pruebas
        tests = [
            ("Weather Conversation", self.test_weather_conversation),
            ("Smart Home Conversation", self.test_smart_home_conversation),
            ("Temporal Conversation", self.test_temporal_conversation),
            ("Anaphora Pattern Detection", self.test_anaphora_pattern_detection)
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                self.log_test(test_name, False, f"Error inesperado: {str(e)}")
                failed += 1
        
        # Resumen final
        total_time = time.time() - self.start_time
        
        print("=" * 70)
        print("üìä RESUMEN DE PRUEBAS DE CONVERSACI√ìN CON AN√ÅFORAS")
        print("=" * 70)
        print(f"‚úÖ Pruebas pasadas: {passed}/{len(tests)}")
        print(f"‚ùå Pruebas fallidas: {failed}/{len(tests)}")
        print(f"üìà Tasa de √©xito: {(passed/len(tests)*100):.1f}%")
        print(f"‚è±Ô∏è  Tiempo total: {total_time:.2f} segundos")
        print()
        
        if failed == 0:
            print("üéØ RESULTADO FINAL: ‚úÖ √âXITO")
            print("üéâ T4.8 - Resoluci√≥n de an√°foras y referencias contextuales: COMPLETADA")
            print("‚úÖ Sistema de resoluci√≥n de an√°foras funcionando correctamente")
        else:
            print("üéØ RESULTADO FINAL: ‚ùå FALLO")
            print("‚ö†Ô∏è  T4.8 - Resoluci√≥n de an√°foras y referencias contextuales: PENDIENTE")
        
        print()
        
        # Guardar resultados detallados
        self.save_detailed_results()
        
        return failed == 0

    def save_detailed_results(self):
        """Guarda los resultados detallados en un archivo JSON"""
        results = {
            "test_suite": "Conversation Anaphora Tester - T4.8",
            "timestamp": datetime.now().isoformat(),
            "base_url": self.base_url,
            "total_tests": len(self.test_results),
            "passed_tests": sum(1 for r in self.test_results if r["success"]),
            "failed_tests": sum(1 for r in self.test_results if not r["success"]),
            "success_rate": sum(1 for r in self.test_results if r["success"]) / len(self.test_results) * 100,
            "test_results": self.test_results
        }
        
        filename = f"conversation_anaphora_test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Resultados detallados guardados en: {filename}")

def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:9904"
    
    tester = ConversationAnaphoraTester(base_url)
    success = tester.run_complete_test_suite()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
